import {
  insert,
  isServer,
  memo,
  setAttribute,
  spread,
  style,
  template
} from "./chunk-SCFISPSH.js";
import {
  createRenderEffect,
  mergeProps
} from "./chunk-BMOKTV46.js";

// node_modules/.pnpm/solid-icons@1.0.4_solid-js@1.5.1/node_modules/solid-icons/lib/index.js
var _tmpl$ = template(`<svg fill="currentColor" stroke-width="0" xmlns="http://www.w3.org/2000/svg"></svg>`, 2);
var _tmpl$2 = template(`<title></title>`, 2);
function IconTemplate(iconSrc, props) {
  const mergedProps = mergeProps(iconSrc.a, props);
  return (() => {
    const _el$ = _tmpl$.cloneNode(true);
    spread(_el$, mergedProps, true, true);
    insert(_el$, () => isServer && iconSrc.c, null);
    insert(_el$, (() => {
      const _c$ = memo(() => !!props.title, true);
      return () => _c$() && (() => {
        const _el$2 = _tmpl$2.cloneNode(true);
        insert(_el$2, () => props.title);
        return _el$2;
      })();
    })(), null);
    createRenderEffect((_p$) => {
      const _v$ = iconSrc.a.stroke, _v$2 = {
        ...props.style,
        overflow: "visible",
        color: props.color || "currentColor"
      }, _v$3 = props.size || "1em", _v$4 = props.size || "1em", _v$5 = iconSrc.c;
      _v$ !== _p$._v$ && setAttribute(_el$, "stroke", _p$._v$ = _v$);
      _p$._v$2 = style(_el$, _v$2, _p$._v$2);
      _v$3 !== _p$._v$3 && setAttribute(_el$, "height", _p$._v$3 = _v$3);
      _v$4 !== _p$._v$4 && setAttribute(_el$, "width", _p$._v$4 = _v$4);
      _v$5 !== _p$._v$5 && (_el$.innerHTML = _p$._v$5 = _v$5);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0,
      _v$3: void 0,
      _v$4: void 0,
      _v$5: void 0
    });
    return _el$;
  })();
}

export {
  IconTemplate
};
//# sourceMappingURL=chunk-YJIYC3XK.js.map
