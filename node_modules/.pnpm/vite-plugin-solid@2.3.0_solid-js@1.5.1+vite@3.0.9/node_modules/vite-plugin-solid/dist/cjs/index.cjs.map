{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import { transformAsync, TransformOptions } from '@babel/core';\r\nimport ts from '@babel/preset-typescript';\r\nimport solid from 'babel-preset-solid';\r\nimport { readFileSync } from 'fs';\r\nimport { mergeAndConcat } from 'merge-anything';\r\nimport { createRequire } from 'module';\r\nimport solidRefresh from 'solid-refresh/babel.js';\r\nimport type { Alias, AliasOptions, Plugin, UserConfig } from 'vite';\r\n\r\nconst require = createRequire(import.meta.url);\r\n\r\nconst runtimePublicPath = '/@solid-refresh';\r\nconst runtimeFilePath = require.resolve('solid-refresh/dist/solid-refresh.mjs');\r\nconst runtimeCode = readFileSync(runtimeFilePath, 'utf-8');\r\n\r\n/** Possible options for the extensions property */\r\nexport interface ExtensionOptions {\r\n  typescript?: boolean;\r\n}\r\n\r\n/** Configuration options for vite-plugin-solid. */\r\nexport interface Options {\r\n  /**\r\n   * This will inject solid-js/dev in place of solid-js in dev mode. Has no\r\n   * effect in prod. If set to `false`, it won't inject it in dev. This is\r\n   * useful for extra logs and debugging.\r\n   *\r\n   * @default true\r\n   */\r\n  dev: boolean;\r\n  /**\r\n   * This will force SSR code in the produced files. This is experiemental\r\n   * and mostly not working yet.\r\n   *\r\n   * @default false\r\n   */\r\n  ssr: boolean;\r\n  /**\r\n   * This will inject HMR runtime in dev mode. Has no effect in prod. If\r\n   * set to `false`, it won't inject the runtime in dev.\r\n   *\r\n   * @default true\r\n   */\r\n  hot: boolean;\r\n  /**\r\n   * This registers additional extensions that should be processed by\r\n   * vite-plugin-solid.\r\n   *\r\n   * @default undefined\r\n   */\r\n  extensions?: (string | [string, ExtensionOptions])[];\r\n  /**\r\n   * Pass any additional babel transform options. They will be merged with\r\n   * the transformations required by Solid.\r\n   *\r\n   * @default {}\r\n   */\r\n  babel:\r\n    | TransformOptions\r\n    | ((source: string, id: string, ssr: boolean) => TransformOptions)\r\n    | ((source: string, id: string, ssr: boolean) => Promise<TransformOptions>);\r\n  typescript: {\r\n    /**\r\n     * Forcibly enables jsx parsing. Otherwise angle brackets will be treated as\r\n     * typescript's legacy type assertion var foo = <string>bar;. Also, isTSX:\r\n     * true requires allExtensions: true.\r\n     *\r\n     * @default false\r\n     */\r\n    isTSX?: boolean;\r\n\r\n    /**\r\n     * Replace the function used when compiling JSX expressions. This is so that\r\n     * we know that the import is not a type import, and should not be removed.\r\n     *\r\n     * @default React\r\n     */\r\n    jsxPragma?: string;\r\n\r\n    /**\r\n     * Replace the function used when compiling JSX fragment expressions. This\r\n     * is so that we know that the import is not a type import, and should not\r\n     * be removed.\r\n     *\r\n     * @default React.Fragment\r\n     */\r\n    jsxPragmaFrag?: string;\r\n\r\n    /**\r\n     * Indicates that every file should be parsed as TS or TSX (depending on the\r\n     * isTSX option).\r\n     *\r\n     * @default false\r\n     */\r\n    allExtensions?: boolean;\r\n\r\n    /**\r\n     * Enables compilation of TypeScript namespaces.\r\n     *\r\n     * @default uses the default set by @babel/plugin-transform-typescript.\r\n     */\r\n    allowNamespaces?: boolean;\r\n\r\n    /**\r\n     * When enabled, type-only class fields are only removed if they are\r\n     * prefixed with the declare modifier:\r\n     *\r\n     * > NOTE: This will be enabled by default in Babel 8\r\n     *\r\n     * @default false\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * class A {\r\n     *   declare foo: string; // Removed\r\n     *   bar: string; // Initialized to undefined\r\n     *    prop?: string; // Initialized to undefined\r\n     *    prop1!: string // Initialized to undefined\r\n     * }\r\n     * ```\r\n     */\r\n    allowDeclareFields?: boolean;\r\n\r\n    /**\r\n     * When set to true, the transform will only remove type-only imports\r\n     * (introduced in TypeScript 3.8). This should only be used if you are using\r\n     * TypeScript >= 3.8.\r\n     *\r\n     * @default false\r\n     */\r\n    onlyRemoveTypeImports?: boolean;\r\n\r\n    /**\r\n     * When set to true, Babel will inline enum values rather than using the\r\n     * usual enum output:\r\n     *\r\n     * This option differs from TypeScript's --isolatedModules behavior, which\r\n     * ignores the const modifier and compiles them as normal enums, and aligns\r\n     * Babel's behavior with TypeScript's default behavior.\r\n     *\r\n     * ```ts\r\n     *  // Input\r\n     *  const enum Animals {\r\n     *    Fish\r\n     *  }\r\n     *  console.log(Animals.Fish);\r\n     *\r\n     *  // Default output\r\n     *  var Animals;\r\n     *\r\n     *  (function (Animals) {\r\n     *    Animals[Animals[\"Fish\"] = 0] = \"Fish\";\r\n     *  })(Animals || (Animals = {}));\r\n     *\r\n     *  console.log(Animals.Fish);\r\n     *\r\n     *  // `optimizeConstEnums` output\r\n     *  console.log(0);\r\n     * ```\r\n     *\r\n     * However, when exporting a const enum Babel will compile it to a plain\r\n     * object literal so that it doesn't need to rely on cross-file analysis\r\n     * when compiling it:\r\n     *\r\n     * ```ts\r\n     * // Input\r\n     * export const enum Animals {\r\n     *   Fish,\r\n     * }\r\n     *\r\n     * // `optimizeConstEnums` output\r\n     * export var Animals = {\r\n     *     Fish: 0,\r\n     * };\r\n     * ```\r\n     *\r\n     * @default false\r\n     */\r\n    optimizeConstEnums?: boolean;\r\n  };\r\n  /**\r\n   * Pass any additional [babel-plugin-jsx-dom-expressions](https://github.com/ryansolid/dom-expressions/tree/main/packages/babel-plugin-jsx-dom-expressions#plugin-options).\r\n   * They will be merged with the defaults sets by [babel-preset-solid](https://github.com/solidjs/solid/blob/main/packages/babel-preset-solid/index.js#L8-L25).\r\n   *\r\n   * @default {}\r\n   */\r\n  solid: {\r\n    /**\r\n     * The name of the runtime module to import the methods from.\r\n     *\r\n     * @default \"solid-js/web\"\r\n     */\r\n    moduleName?: string;\r\n\r\n    /**\r\n     * The output mode of the compiler.\r\n     * Can be:\r\n     * - \"dom\" is standard output\r\n     * - \"ssr\" is for server side rendering of strings.\r\n     * - \"universal\" is for using custom renderers from solid-js/universal\r\n     *\r\n     * @default \"dom\"\r\n     */\r\n    generate?: 'ssr' | 'dom' | 'universal';\r\n\r\n    /**\r\n     * Indicate whether the output should contain hydratable markers.\r\n     *\r\n     * @default false\r\n     */\r\n    hydratable?: boolean;\r\n\r\n    /**\r\n     * Boolean to indicate whether to enable automatic event delegation on camelCase.\r\n     *\r\n     * @default true\r\n     */\r\n    delegateEvents?: boolean;\r\n\r\n    /**\r\n     * Boolean indicates whether smart conditional detection should be used.\r\n     * This optimizes simple boolean expressions and ternaries in JSX.\r\n     *\r\n     * @default true\r\n     */\r\n    wrapConditionals?: boolean;\r\n\r\n    /**\r\n     * Boolean indicates whether to set current render context on Custom Elements and slots.\r\n     * Useful for seemless Context API with Web Components.\r\n     *\r\n     * @default true\r\n     */\r\n    contextToCustomElements?: boolean;\r\n\r\n    /**\r\n     * Array of Component exports from module, that aren't included by default with the library.\r\n     * This plugin will automatically import them if it comes across them in the JSX.\r\n     *\r\n     * @default [\"For\",\"Show\",\"Switch\",\"Match\",\"Suspense\",\"SuspenseList\",\"Portal\",\"Index\",\"Dynamic\",\"ErrorBoundary\"]\r\n     */\r\n    builtIns?: string[];\r\n  };\r\n}\r\n\r\nfunction getExtension(filename: string): string {\r\n  const index = filename.lastIndexOf('.');\r\n  return index < 0 ? '' : filename.substring(index);\r\n}\r\n\r\nexport default function solidPlugin(options: Partial<Options> = {}): Plugin {\r\n  let needHmr = false;\r\n  let replaceDev = false;\r\n  let projectRoot = process.cwd();\r\n\r\n  return {\r\n    name: 'solid',\r\n    enforce: 'pre',\r\n\r\n    config(userConfig, { command }): UserConfig {\r\n      // We inject the dev mode only if the user explicitely wants it or if we are in dev (serve) mode\r\n      replaceDev = options.dev === true || (options.dev !== false && command === 'serve');\r\n      projectRoot = userConfig.root;\r\n\r\n      if (!userConfig.resolve) userConfig.resolve = {};\r\n      userConfig.resolve.alias = normalizeAliases(userConfig.resolve && userConfig.resolve.alias);\r\n\r\n      // fix for bundling dev in production\r\n      const nestedDeps = replaceDev\r\n        ? ['solid-js', 'solid-js/web', 'solid-js/store', 'solid-js/html', 'solid-js/h']\r\n        : [];\r\n\r\n      return {\r\n        /**\r\n         * We only need esbuild on .ts or .js files.\r\n         * .tsx & .jsx files are handled by us\r\n         */\r\n        esbuild: { include: /\\.ts$/ },\r\n        resolve: {\r\n          conditions: ['solid', ...(replaceDev ? ['development'] : [])],\r\n          dedupe: nestedDeps,\r\n          alias: [{ find: /^solid-refresh$/, replacement: runtimePublicPath }],\r\n        },\r\n        optimizeDeps: {\r\n          include: nestedDeps,\r\n        },\r\n      } as UserConfig;\r\n    },\r\n\r\n    configResolved(config) {\r\n      needHmr = config.command === 'serve' && config.mode !== 'production' && options.hot !== false;\r\n    },\r\n\r\n    resolveId(id) {\r\n      if (id === runtimePublicPath) return id;\r\n    },\r\n\r\n    load(id) {\r\n      if (id === runtimePublicPath) return runtimeCode;\r\n    },\r\n\r\n    async transform(source, id, transformOptions) {\r\n      const isSsr = transformOptions && transformOptions.ssr;\r\n      const currentFileExtension = getExtension(id);\r\n\r\n      const extensionsToWatch = [...(options.extensions || []), '.tsx', '.jsx'];\r\n      const allExtensions = extensionsToWatch.map((extension) =>\r\n        // An extension can be a string or a tuple [extension, options]\r\n        typeof extension === 'string' ? extension : extension[0],\r\n      );\r\n\r\n      if (!allExtensions.includes(currentFileExtension)) {\r\n        return null;\r\n      }\r\n\r\n      const inNodeModules = /node_modules/.test(id);\r\n\r\n      let solidOptions: { generate: 'ssr' | 'dom'; hydratable: boolean };\r\n\r\n      if (options.ssr) {\r\n        if (isSsr) {\r\n          solidOptions = { generate: 'ssr', hydratable: true };\r\n        } else {\r\n          solidOptions = { generate: 'dom', hydratable: true };\r\n        }\r\n      } else {\r\n        solidOptions = { generate: 'dom', hydratable: false };\r\n      }\r\n\r\n      const opts: TransformOptions = {\r\n        babelrc: false,\r\n        configFile: false,\r\n        root: projectRoot,\r\n        filename: id,\r\n        sourceFileName: id,\r\n        presets: [[solid, { ...solidOptions, ...(options.solid || {}) }]],\r\n        plugins: needHmr && !isSsr && !inNodeModules ? [[solidRefresh, { bundler: 'vite' }]] : [],\r\n        sourceMaps: true,\r\n        // Vite handles sourcemap flattening\r\n        inputSourceMap: false as any,\r\n      };\r\n\r\n      // We need to know if the current file extension has a typescript options tied to it\r\n      const shouldBeProcessedWithTypescript = extensionsToWatch.some((extension) => {\r\n        if (typeof extension === 'string') {\r\n          return extension.includes('tsx');\r\n        }\r\n\r\n        const [extensionName, extensionOptions] = extension;\r\n        if (extensionName !== currentFileExtension) return false;\r\n\r\n        return extensionOptions.typescript;\r\n      });\r\n\r\n      if (shouldBeProcessedWithTypescript) {\r\n        opts.presets.push([ts, options.typescript || {}]);\r\n      }\r\n\r\n      // Default value for babel user options\r\n      let babelUserOptions: TransformOptions = {};\r\n\r\n      if (options.babel) {\r\n        if (typeof options.babel === 'function') {\r\n          const babelOptions = options.babel(source, id, isSsr);\r\n          babelUserOptions = babelOptions instanceof Promise ? await babelOptions : babelOptions;\r\n        } else {\r\n          babelUserOptions = options.babel;\r\n        }\r\n      }\r\n\r\n      const babelOptions = mergeAndConcat(babelUserOptions, opts) as TransformOptions;\r\n\r\n      const { code, map } = await transformAsync(source, babelOptions);\r\n\r\n      return { code, map };\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * This basically normalize all aliases of the config into\r\n * the array format of the alias.\r\n *\r\n * eg: alias: { '@': 'src/' } => [{ find: '@', replacement: 'src/' }]\r\n */\r\nfunction normalizeAliases(alias: AliasOptions = []): Alias[] {\r\n  return Array.isArray(alias)\r\n    ? alias\r\n    : Object.entries(alias).map(([find, replacement]) => ({ find, replacement }));\r\n}\r\n"],"names":["require","createRequire","import","runtimePublicPath","runtimeFilePath","resolve","runtimeCode","readFileSync","getExtension","filename","index","lastIndexOf","substring","solidPlugin","options","needHmr","replaceDev","projectRoot","process","cwd","name","enforce","config","userConfig","command","dev","root","alias","normalizeAliases","nestedDeps","esbuild","include","conditions","dedupe","find","replacement","optimizeDeps","configResolved","mode","hot","resolveId","id","load","transform","source","transformOptions","isSsr","ssr","currentFileExtension","extensionsToWatch","extensions","allExtensions","map","extension","includes","inNodeModules","test","solidOptions","generate","hydratable","opts","babelrc","configFile","sourceFileName","presets","solid","plugins","solidRefresh","bundler","sourceMaps","inputSourceMap","shouldBeProcessedWithTypescript","some","extensionName","extensionOptions","typescript","push","ts","babelUserOptions","babel","babelOptions","Promise","mergeAndConcat","code","transformAsync","Array","isArray","Object","entries"],"mappings":"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"}